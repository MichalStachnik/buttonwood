import type { NextPage } from 'next';
import { useState, useEffect } from 'react';
import { getTokenInfo } from 'erc20-token-list';
import {
  BigNumber,
  Contract,
  getDefaultProvider,
  ethers,
  providers,
  utils,
} from 'ethers';

import Head from 'next/head';
import Image from 'next/image';
import DropdownToken from '../components/DropdownToken/DropdownToken';
import Spinner from '../components/Loader/Loader';
import styles from '../styles/index.module.css';

const initWeb3Provider = (): providers.Web3Provider =>
  new providers.Web3Provider((window as any).ethereum);

// TODO: get keys for infura and alchemy

const Home: NextPage = () => {
  const [selectedTokenBalance, setSelectedTokenBalance] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const getAccount = async () => {
    console.log('getting accnt...');
    console.log((window as any).ethereum);
    console.log(typeof window.ethereum);

    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts',
    });

    console.log('accounts', accounts);
    const [account] = accounts;
    return account;
  };

  const getWalletBalance = async (): Promise<string> => {
    const address = await getAccount();

    const provider = initWeb3Provider();

    const balance = await provider.getBalance(address);

    console.log('the balance we got', balance);

    const formattedBalance = utils.formatEther(balance);

    console.log('formattedBalance', formattedBalance);
    return formattedBalance;
  };

  const getERC20WalletBalance = async (address: string) => {
    const abi = ['function balanceOf(address owner) view returns (uint256)'];
    const provider = getDefaultProvider();

    const erc20Contract = new Contract(address, abi, provider);

    const balance = await erc20Contract.balanceOf(address);

    // setSelectedTokenBalance(parseFloat(utils.formatEther(balance)));
    setSelectedTokenBalance(utils.formatEther(balance));
    setIsLoading(false);
  };

  const handleDropdownChange = async (
    e: React.ChangeEvent<HTMLSelectElement>
  ) => {
    setIsLoading(true);
    console.log(e.target.value);

    const tokenInfo = getTokenInfo(e.target.value);

    if (tokenInfo === undefined) {
      throw new Error(
        `Can NOT find ERC20 contract address of ${e.target.value}`
      );
    }

    getERC20WalletBalance(tokenInfo.address);
  };

  console.log(selectedTokenBalance);
  return (
    <div className={styles.container}>
      <Head>
        <title>Buttonwood</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.dashboard}>
          <div className={styles.result}>
            <span className={styles.display}>
              {isLoading ? <Spinner /> : <p>{selectedTokenBalance}</p>}
            </span>
            <span className={styles.display}></span>
            <span className={styles.display}></span>
          </div>
          <div className={styles.controls}>
            <div className={styles.buttonContainer}>
              <button onClick={getAccount}>wallet address</button>
              <button onClick={getWalletBalance}>ETH balance</button>
            </div>
            <div className={styles.infoModule}>
              <DropdownToken handleDropdownChange={handleDropdownChange} />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
